import java.util.Scanner;
/**
 * 여기에 main 클래스 설명을 작성하십시오.
 * 
 * @author (2022320035_배우준) 
 * @version (2023/05/05)
 */

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("계산식을 입력하시오.(예 >> 5 + 7) >> ");
        String expression = scanner.nextLine();

        String[] tokens = expression.split(" ");
        if (tokens.length != 3) {
            System.out.println("Invalid expression.");
            return;
        }

        int a = Integer.parseInt(tokens[0]);
        int b = Integer.parseInt(tokens[2]);
        String operator = tokens[1];

        run(a, b, operator);
    }

    public static void run(int a, int b, String operator) {
        Calculator calculator = null;

        switch (operator) {
            case "+":
                calculator = new Calculator(new Add(), a, b);
                break;
            case "-":
                calculator = new Calculator(new Sub(), a, b);
                break;
            case "*":
                calculator = new Calculator(new Mul(), a, b);
                break;
            case "/":
                calculator = new Calculator(new Div(), a, b);
                break;
            default:
                System.out.println("Invalid operator.");
                return;
        }

        System.out.println(calculator.calculate());
    }
}


abstract class Operation {
    public abstract int calculate();

    public abstract void setValue(int a, int b);
}

class Add extends Operation {
    private int a;
    private int b;

    @Override
    public void setValue(int a, int b) {
        this.a = a;
        this.b = b;
    }

    @Override
    public int calculate() {
        return a + b;
    }
}

class Subtract extends Operation {
    private int a;
    private int b;

    @Override
    public void setValue(int a, int b) {
        this.a = a;
        this.b = b;
    }

    @Override
    public int calculate() {
        return a - b;
    }
}

class Multiply extends Operation {
    private int a;
    private int b;

    @Override
    public void setValue(int a, int b) {
        this.a = a;
        this.b = b;
    }

    @Override
    public int calculate() {
        return a * b;
    }
}

class Divide extends Operation {
    private int a;
    private int b;

    @Override
    public void setValue(int a, int b) {
        this.a = a;
        this.b = b;
    }

    @Override
    public int calculate() {
        return a / b;
    }
}

class Calculator {
    private Operation operation;
    private int a;
    private int b;

    public Calculator(Operation operation, int a, int b) {
        this.operation = operation;
        this.a = a;
        this.b = b;
    }

    public int calculate() {
        operation.setValue(a, b);
        return operation.calculate();
    }
}


